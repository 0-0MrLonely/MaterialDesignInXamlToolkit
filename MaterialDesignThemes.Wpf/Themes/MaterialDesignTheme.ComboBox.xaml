<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:converters="clr-namespace:MaterialDesignThemes.Wpf.Converters"
                    xmlns:system="clr-namespace:System;assembly=mscorlib"
                    xmlns:wpf="clr-namespace:MaterialDesignThemes.Wpf">

    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="pack://application:,,,/MaterialDesignThemes.Wpf;component/Themes/MaterialDesignTheme.Shadows.xaml" />
    </ResourceDictionary.MergedDictionaries>

    <converters:TextFieldHintVisibilityConverter x:Key="TextFieldHintVisibilityConverter" IsNotEmptyValue="Collapsed" />
    <converters:MathConverter x:Key="MathAddConverter" Operation="Add" />
    <converters:BrushRoundConverter x:Key="BrushRoundConverter" />

    <Storyboard x:Key="MaterialDesignComboBoxPopupAnimationExpand">
        <ThicknessAnimation AccelerationRatio="0.7"
                            DecelerationRatio="0.3"
                            Duration="0:0:0.3"
                            From="16 0 16 0"
                            Storyboard.TargetName="shadow"
                            Storyboard.TargetProperty="Margin"
                            To="0 0 0 0" />
        <!--
        <DoubleAnimation AccelerationRatio="0.7"
                         DecelerationRatio="0.3"
                         Duration="0:0:0.4"
                         From="0"
                         Storyboard.TargetName="PopupTemplateRootGrid"
                         Storyboard.TargetProperty="Opacity"
                         To="1" />
        -->
    </Storyboard>

    <Storyboard x:Key="MaterialDesignComboBoxPopupAnimationCollapse">
        <!--
        <DoubleAnimation Duration="0:0:0"
                         Storyboard.TargetName="PopupTemplateRootGrid"
                         Storyboard.TargetProperty="Opacity"
                         To="0" />
        -->
        <ThicknessAnimation Duration="0:0:0.3"
                            Storyboard.TargetName="shadow"
                            Storyboard.TargetProperty="Margin"
                            To="11 0 11 0" />
    </Storyboard>

    <Style x:Key="FocusVisual">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate>
                    <Rectangle Margin="2 2 2 2"
                               SnapsToDevicePixels="true"
                               Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"
                               StrokeDashArray="1 2"
                               StrokeThickness="1" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="MaterialDesignComboBoxEditableTextBox" TargetType="{x:Type TextBox}">
        <Setter Property="OverridesDefaultStyle" Value="true" />
        <Setter Property="AllowDrop" Value="true" />
        <Setter Property="MinWidth" Value="0" />
        <Setter Property="MinHeight" Value="0" />
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="ScrollViewer.PanningMode" Value="VerticalFirst" />
        <Setter Property="Stylus.IsFlicksEnabled" Value="False" />
        <Setter Property="wpf:TextFieldAssist.TextBoxViewMargin" Value="1 0 1 0" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TextBox}">
                    <Grid>
                        <ScrollViewer x:Name="PART_ContentHost"
                                      Focusable="false"
                                      HorizontalScrollBarVisibility="Hidden"
                                      VerticalScrollBarVisibility="Hidden" />
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <ControlTemplate x:Key="MaterialDesignComboBoxItemTemplate" TargetType="{x:Type ComboBoxItem}">
        <Grid x:Name="GridWrapper">
            <VisualStateManager.VisualStateGroups>
                <VisualStateGroup Name="CommonStates">
                    <VisualStateGroup.Transitions>
                        <VisualTransition GeneratedDuration="0:0:0.3" To="Normal">
                            <VisualTransition.GeneratedEasingFunction>
                                <CircleEase EasingMode="EaseOut" />
                            </VisualTransition.GeneratedEasingFunction>
                        </VisualTransition>
                    </VisualStateGroup.Transitions>
                    <VisualState Name="Normal" />
                    <VisualState Name="MouseOver">
                        <Storyboard>
                            <DoubleAnimation Duration="0"
                                             Storyboard.TargetName="MouseOverBorder"
                                             Storyboard.TargetProperty="Opacity"
                                             To="0.1" />
                        </Storyboard>
                    </VisualState>
                </VisualStateGroup>
                <VisualStateGroup Name="SelectionStates">
                    <VisualStateGroup.Transitions>
                        <VisualTransition GeneratedDuration="0:0:0.3" />
                    </VisualStateGroup.Transitions>
                    <VisualState Name="Selected">
                        <Storyboard>
                            <DoubleAnimation Duration="0"
                                             Storyboard.TargetName="SelectedBorder"
                                             Storyboard.TargetProperty="Opacity"
                                             To="0.18" />
                        </Storyboard>
                    </VisualState>
                    <VisualState Name="Unselected" />
                </VisualStateGroup>
                <VisualStateGroup Name="FocusStates">
                    <VisualStateGroup.Transitions>
                        <VisualTransition GeneratedDuration="0:0:0.3" To="Unfocused" />
                    </VisualStateGroup.Transitions>
                    <VisualState Name="Focused">
                        <Storyboard>
                            <DoubleAnimation Duration="0"
                                             Storyboard.TargetName="MouseOverBorder"
                                             Storyboard.TargetProperty="Opacity"
                                             To="0.1" />
                        </Storyboard>
                    </VisualState>
                    <VisualState Name="Unfocused" />
                </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
            <Border x:Name="BackBorder"
                    Background="{TemplateBinding Background}"
                    BorderBrush="{TemplateBinding BorderBrush}"
                    BorderThickness="{TemplateBinding BorderThickness}"
                    SnapsToDevicePixels="true" />

            <Border x:Name="MouseOverBorder"
                    Background="{TemplateBinding Foreground,
                                                 Converter={StaticResource BrushRoundConverter}}"
                    BorderBrush="{TemplateBinding BorderBrush}"
                    BorderThickness="{TemplateBinding BorderThickness}"
                    Opacity="0"
                    SnapsToDevicePixels="true" />
            <Border x:Name="SelectedBorder"
                    Background="{TemplateBinding Foreground,
                                                 Converter={StaticResource BrushRoundConverter}}"
                    Opacity="0"
                    RenderTransformOrigin="0.5,0.5" />
            <wpf:Ripple HorizontalAlignment="Stretch"
                        VerticalAlignment="Stretch"
                        HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
                        VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
                        Content="{TemplateBinding Content}"
                        ContentTemplate="{TemplateBinding ContentTemplate}"
                        ContentTemplateSelector="{TemplateBinding ContentTemplateSelector}"
                        Feedback="{TemplateBinding Foreground,
                                                   Converter={StaticResource BrushRoundConverter}}"
                        Focusable="False"
                        Padding="{TemplateBinding Padding}"
                        SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="IsEnabled" Value="False">
                <Setter TargetName="GridWrapper" Property="Opacity" Value="0.56" />
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="Tag" Value="1.0" />
                    <Condition Property="IsSelected" Value="True" />
                </MultiTrigger.Conditions>
                <Setter Property="Height" Value="0"/>
            </MultiTrigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <Style x:Key="MaterialDesignComboBoxItemStyle" TargetType="{x:Type ComboBoxItem}">
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="Padding" Value="16 8" />
        <Setter Property="HorizontalContentAlignment" Value="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" />
        <Setter Property="VerticalContentAlignment" Value="{Binding VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="BorderBrush" Value="Transparent" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisual}" />
        <Setter Property="Template" Value="{StaticResource MaterialDesignComboBoxItemTemplate}" />
    </Style>

    <Style x:Key="MaterialDesignComboBoxItemSelectedCollapsedStyle"
           BasedOn="{StaticResource MaterialDesignComboBoxItemStyle}"
           TargetType="{x:Type ComboBoxItem}">
        <Setter Property="Tag" Value="1.0" />
    </Style>

    <Style x:Key="MaterialDesignComboBoxToggleButton" TargetType="{x:Type ToggleButton}">
        <Setter Property="Foreground" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type FrameworkElement}}, Path=(TextElement.Foreground)}" />
        <Setter Property="OverridesDefaultStyle" Value="true" />
        <Setter Property="IsTabStop" Value="false" />
        <Setter Property="Focusable" Value="false" />
        <Setter Property="ClickMode" Value="Press" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Grid>
                        <Border x:Name="templateRoot"
                                Background="{TemplateBinding Background}"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                UseLayoutRounding="True">
                            <Border x:Name="splitBorder"
                                    Margin="0"
                                    HorizontalAlignment="Right"
                                    VerticalAlignment="Center"
                                    BorderBrush="Transparent"
                                    BorderThickness="0"
                                    UseLayoutRounding="true">
                                <Path x:Name="arrow"
                                              Width="8" Height="8"
                                              Margin="0"
                                              Stretch="Uniform"
                                              HorizontalAlignment="Right"
                                              VerticalAlignment="Center"
                                              Data="M7,10L12,15L17,10H7Z"
                                              Fill="{TemplateBinding BorderBrush}" />
                            </Border>
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}" Value="true" />
                                <Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}" Value="false" />
                            </MultiDataTrigger.Conditions>
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}" Value="true" />
                                <Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}" Value="true" />
                            </MultiDataTrigger.Conditions>
                            <Setter Property="BorderBrush" Value="{DynamicResource PrimaryHueMidBrush}" />
                        </MultiDataTrigger>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter TargetName="arrow" Property="Fill" Value="{DynamicResource PrimaryHueDarkBrush}" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter TargetName="arrow" Property="Fill" Value="{DynamicResource MaterialDesignCheckBoxDisabled}" />
                        </Trigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsEnabled, RelativeSource={RelativeSource Self}}" Value="false" />
                                <Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}" Value="false" />
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="templateRoot" Property="BorderBrush" Value="{DynamicResource MaterialDesignCheckBoxDisabled}" />
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsEnabled, RelativeSource={RelativeSource Self}}" Value="false" />
                                <Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}" Value="true" />
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="templateRoot" Property="BorderBrush" Value="{DynamicResource MaterialDesignCheckBoxDisabled}" />
                            <Setter TargetName="splitBorder" Property="BorderBrush" Value="{DynamicResource MaterialDesignCheckBoxDisabled}" />
                        </MultiDataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <ControlTemplate x:Key="MaterialDesignComboBoxTemplate" TargetType="{x:Type ComboBox}">
        <Grid x:Name="templateRoot"
              SnapsToDevicePixels="True"
              UseLayoutRounding="True">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="*" />
                <ColumnDefinition Width="0" MinWidth="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}" />
            </Grid.ColumnDefinitions>
            <ToggleButton x:Name="toggleButton"
                              Background="{TemplateBinding Background}"
                              BorderBrush="{TemplateBinding BorderBrush}"
                              BorderThickness="{TemplateBinding BorderThickness}"
                              Grid.ColumnSpan="2"
                              IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                              Style="{StaticResource MaterialDesignComboBoxToggleButton}" />
            <Grid x:Name="ContentWrapper"
                      Margin="{TemplateBinding Padding}"
                      HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                      VerticalAlignment="{TemplateBinding VerticalContentAlignment}">
                <TextBlock x:Name="Hint"
                           IsHitTestVisible="False"
                           Opacity="{Binding Path=(wpf:TextFieldAssist.HintOpacity), RelativeSource={RelativeSource TemplatedParent}}"
                           Text="{TemplateBinding wpf:TextFieldAssist.Hint}"
                           SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                           UseLayoutRounding="{TemplateBinding UseLayoutRounding}"
                           Visibility="{TemplateBinding Text, Converter={StaticResource TextFieldHintVisibilityConverter}}" />
                <ContentPresenter x:Name="contentPresenter"
                                  Content="{TemplateBinding SelectionBoxItem}"
                                  ContentStringFormat="{TemplateBinding SelectionBoxItemStringFormat}"
                                  ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}"
                                  ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}"
                                  IsHitTestVisible="false"
                                  SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                  UseLayoutRounding="{TemplateBinding UseLayoutRounding}" />
                <TextBox x:Name="PART_EditableTextBox"
                         IsReadOnly="{Binding IsReadOnly, RelativeSource={RelativeSource TemplatedParent}}"
                         Style="{StaticResource MaterialDesignComboBoxEditableTextBox}"
                         SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                         UseLayoutRounding="{TemplateBinding UseLayoutRounding}"
                         Visibility="Collapsed" />
            </Grid>
            <wpf:Underline x:Name="Underline"
                           Grid.ColumnSpan="2"
                           IsActive="{Binding ElementName=PART_EditableTextBox, Path=IsKeyboardFocused}"
                           Visibility="Collapsed" />

            <Popup x:Name="PART_Popup"
                   AllowsTransparency="true"
                   Focusable="False"
                   HorizontalOffset="-16"
                   IsOpen="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                   PlacementTarget="{Binding ElementName=templateRoot}"
                   SnapsToDevicePixels="True"
                   UseLayoutRounding="True"
                   Placement="RelativePoint"
                   PopupAnimation="Fade"
                   VerticalOffset="-8">
                <Grid MinWidth="{Binding ActualWidth, ElementName=templateRoot, Converter={StaticResource MathAddConverter}, ConverterParameter=32}"
                      MaxHeight="{TemplateBinding MaxDropDownHeight}"
                      Margin="5">
                    <Grid.RowDefinitions>
                        <RowDefinition Height="Auto" />
                        <RowDefinition Height="*" />
                        <RowDefinition Height="Auto" />
                    </Grid.RowDefinitions>
                    <Border x:Name="shadow"
                            Grid.RowSpan="3"
                            Background="{DynamicResource MaterialDesignPaper}"
                            CornerRadius="2"
                            Effect="{StaticResource MaterialDesignShadowDepth2}" />
                    <Border x:Name="dropDownBorder"
                            Grid.RowSpan="3"
                            Margin="{Binding ElementName=shadow, Path=Margin, Mode=OneWay}"
                            Background="Transparent"
                            CornerRadius="2" />
                    <Grid Grid.Row="0" Margin="16 8 16 4">
                        <Border BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                Visibility="{Binding ElementName=PART_EditableTextBox, Path=Visibility}"/>
                        <Grid Margin="{Binding ElementName=ContentWrapper, Path=Margin}"
                              VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                              HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}">
                            <TextBox x:Name="EditableTextBoxClone"
                                     SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                     UseLayoutRounding="{TemplateBinding UseLayoutRounding}"
                                     Visibility="{Binding ElementName=PART_EditableTextBox, Path=Visibility}"
                                     IsReadOnly="{Binding IsReadOnly, RelativeSource={RelativeSource TemplatedParent}}"
                                     Style="{StaticResource MaterialDesignComboBoxEditableTextBox}"
                                     Text="{Binding ElementName=PART_EditableTextBox, Path=Text, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" />
                            <ContentPresenter Content="{TemplateBinding SelectionBoxItem}"
                                              ContentStringFormat="{TemplateBinding SelectionBoxItemStringFormat}"
                                              ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}"
                                              ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}"
                                              IsHitTestVisible="False"
                                              SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                              UseLayoutRounding="{TemplateBinding UseLayoutRounding}"
                                              Visibility="{Binding ElementName=contentPresenter, Path=Visibility}" />
                            <TextBlock IsHitTestVisible="False"
                                       SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                       UseLayoutRounding="{TemplateBinding UseLayoutRounding}"
                                       Opacity="{Binding Path=(wpf:TextFieldAssist.HintOpacity), RelativeSource={RelativeSource TemplatedParent}}"
                                       Text="{TemplateBinding wpf:TextFieldAssist.Hint}"
                                       Visibility="{Binding ElementName=Hint, Path=Visibility}" />
                        </Grid>
                        <wpf:Underline IsActive="{Binding ElementName=EditableTextBoxClone, Path=IsKeyboardFocused}"
                                       Visibility="{Binding ElementName=PART_EditableTextBox, Path=Visibility}"/>
                    </Grid>
                    <ScrollViewer Grid.Row="1">
                        <ItemsPresenter x:Name="ItemsPresenter" KeyboardNavigation.DirectionalNavigation="Contained" />
                    </ScrollViewer>
                    <Rectangle Grid.Row="2"
                               Height="8"
                               HorizontalAlignment="Stretch"
                               Fill="Transparent" />
                </Grid>
            </Popup>
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="IsEditable" Value="True">
                <Setter TargetName="PART_EditableTextBox" Property="Visibility" Value="Visible" />
                <Setter TargetName="Underline" Property="Visibility" Value="Visible" />
                <Setter TargetName="contentPresenter" Property="Visibility" Value="Collapsed" />
            </Trigger>
            <Trigger Property="IsDropDownOpen" Value="True">
                <Trigger.EnterActions>
                    <BeginStoryboard Storyboard="{DynamicResource MaterialDesignComboBoxPopupAnimationExpand}" />
                </Trigger.EnterActions>
                <Trigger.ExitActions>
                    <BeginStoryboard Storyboard="{DynamicResource MaterialDesignComboBoxPopupAnimationCollapse}" />
                </Trigger.ExitActions>
            </Trigger>
            <Trigger SourceName="PART_Popup" Property="HasDropShadow" Value="true">
                <Setter TargetName="shadow" Property="Margin" Value="0" />
            </Trigger>
            <Trigger Property="HasItems" Value="false">
                <Setter TargetName="dropDownBorder" Property="Height" Value="95" />
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsGrouping" Value="true" />
                    <Condition Property="VirtualizingPanel.IsVirtualizingWhenGrouping" Value="false" />
                </MultiTrigger.Conditions>
                <Setter Property="ScrollViewer.CanContentScroll" Value="false" />
            </MultiTrigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <ControlTemplate x:Key="MaterialDesignFloatingHintComboBoxTemplate" TargetType="{x:Type ComboBox}">
        <ControlTemplate.Resources>
            <Storyboard x:Key="MoveHintAsideStoryboard">
                <DoubleAnimation Duration="0:0:0.3"
                                 Storyboard.TargetName="Hint"
                                 Storyboard.TargetProperty="FontSize"
                                 To="10">
                    <DoubleAnimation.EasingFunction>
                        <SineEase EasingMode="EaseOut" />
                    </DoubleAnimation.EasingFunction>
                </DoubleAnimation>
                <DoubleAnimation Duration="0:0:0.3"
                                 Storyboard.TargetName="Hint"
                                 Storyboard.TargetProperty="Opacity"
                                 To="1">
                    <DoubleAnimation.EasingFunction>
                        <SineEase EasingMode="EaseOut" />
                    </DoubleAnimation.EasingFunction>
                </DoubleAnimation>
                <ThicknessAnimation Duration="0:0:0.3"
                                    Storyboard.TargetName="Hint"
                                    Storyboard.TargetProperty="(FrameworkElement.Margin)"
                                    To="0,-14,0,0">
                    <ThicknessAnimation.EasingFunction>
                        <SineEase EasingMode="EaseOut" />
                    </ThicknessAnimation.EasingFunction>
                </ThicknessAnimation>
            </Storyboard>
            <Storyboard x:Key="MoveHintBackStoryboard">
                <DoubleAnimation Duration="0:0:0.3"
                                 Storyboard.TargetName="Hint"
                                 Storyboard.TargetProperty="FontSize">
                    <DoubleAnimation.EasingFunction>
                        <SineEase EasingMode="EaseOut" />
                    </DoubleAnimation.EasingFunction>
                </DoubleAnimation>
                <DoubleAnimation Duration="0:0:0.3"
                                 Storyboard.TargetName="Hint"
                                 Storyboard.TargetProperty="Opacity">
                    <DoubleAnimation.EasingFunction>
                        <SineEase EasingMode="EaseOut" />
                    </DoubleAnimation.EasingFunction>
                </DoubleAnimation>
                <ThicknessAnimation Duration="0:0:0.3"
                                    Storyboard.TargetName="Hint"
                                    Storyboard.TargetProperty="(FrameworkElement.Margin)">
                    <ThicknessAnimation.EasingFunction>
                        <SineEase EasingMode="EaseOut" />
                    </ThicknessAnimation.EasingFunction>
                </ThicknessAnimation>
            </Storyboard>
        </ControlTemplate.Resources>
        <Grid x:Name="templateRoot"
              UseLayoutRounding="True"
              SnapsToDevicePixels="True">
            <Grid Margin="0 16 0 0"
                  x:Name="MarginWrapper">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="*" />
                    <ColumnDefinition Width="0" MinWidth="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}" />
                </Grid.ColumnDefinitions>
                <ToggleButton x:Name="toggleButton"
                              Grid.ColumnSpan="2"
                              Background="{TemplateBinding Background}"
                              BorderBrush="{TemplateBinding BorderBrush}"
                              BorderThickness="{TemplateBinding BorderThickness}"
                              IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                              Style="{StaticResource MaterialDesignComboBoxToggleButton}" />
                <TextBlock x:Name="Hint"
                           Margin="{TemplateBinding Padding}"
                           FontSize="{TemplateBinding FontSize}"
                           HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                           IsHitTestVisible="False"
                           Opacity="{Binding Path=(wpf:TextFieldAssist.HintOpacity), RelativeSource={RelativeSource TemplatedParent}}"
                           SnapsToDevicePixels="True"
                           UseLayoutRounding="True"
                           Text="{TemplateBinding wpf:TextFieldAssist.Hint}" />
                <Grid x:Name="ContentWrapper"
                      Margin="{TemplateBinding Padding}"
                      HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                      VerticalAlignment="{TemplateBinding VerticalContentAlignment}">
                    <ContentPresenter x:Name="contentPresenter"
                                      Content="{TemplateBinding SelectionBoxItem}"
                                      ContentStringFormat="{TemplateBinding SelectionBoxItemStringFormat}"
                                      ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}"
                                      ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}"
                                      IsHitTestVisible="false"
                                      SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                    <TextBox x:Name="PART_EditableTextBox"
                             IsReadOnly="{Binding IsReadOnly, RelativeSource={RelativeSource TemplatedParent}}"
                             Style="{StaticResource MaterialDesignComboBoxEditableTextBox}"
                             Visibility="Collapsed" />
                </Grid>
                <wpf:Underline x:Name="Underline"
                               Grid.ColumnSpan="2"
                               IsActive="{Binding ElementName=PART_EditableTextBox, Path=IsKeyboardFocused}"
                               Visibility="Collapsed" />

                <Popup x:Name="PART_Popup"
                       Grid.ColumnSpan="2"
                       AllowsTransparency="true"
                       Focusable="False"
                       HorizontalOffset="-16"
                       IsOpen="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                       Placement="RelativePoint"
                       UseLayoutRounding="True"
                       SnapsToDevicePixels="True"
                       PopupAnimation="Fade"
                       VerticalOffset="-16">
                    <Grid MinWidth="{Binding ActualWidth, ElementName=templateRoot, Converter={StaticResource MathAddConverter}, ConverterParameter=32}"
                          MaxHeight="{TemplateBinding MaxDropDownHeight}"
                          Margin="5">
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto" />
                            <RowDefinition Height="*" />
                            <RowDefinition Height="Auto" />
                        </Grid.RowDefinitions>
                        <Border x:Name="shadow"
                                Grid.RowSpan="3"
                                Background="{DynamicResource MaterialDesignPaper}"
                                CornerRadius="2"
                                Effect="{StaticResource MaterialDesignShadowDepth2}" />
                        <Border x:Name="dropDownBorder"
                                Grid.RowSpan="3"
                                Margin="{Binding ElementName=shadow, Path=Margin, Mode=OneWay}"
                                VerticalAlignment="Top"
                                Background="Transparent"
                                CornerRadius="2" />
                        <Grid x:Name="GridContentCloneWrapper"
                              Grid.Row="0"
                              Margin="16 0 16 4"
                              Height="{Binding ElementName=templateRoot, Path=ActualHeight}">
                            <Grid Margin="0 16 0 0" Height="{Binding ElementName=MarginWrapper, Path=ActualHeight}">
                                <ToggleButton Visibility="Hidden"
                                              Background="{TemplateBinding Background}"
                                              BorderBrush="{TemplateBinding BorderBrush}"
                                              BorderThickness="{TemplateBinding BorderThickness}"
                                              Style="{StaticResource MaterialDesignComboBoxToggleButton}" />
                                <Border BorderBrush="{TemplateBinding BorderBrush}"
                                        BorderThickness="{TemplateBinding BorderThickness}"
                                        Visibility="{Binding ElementName=PART_EditableTextBox, Path=Visibility}"/>
                                <Grid Margin="{Binding ElementName=ContentWrapper, Path=Margin}"
                                      Height="{Binding ElementName=ContentWrapper, Path=ActualHeight}"
                                      VerticalAlignment="{Binding ElementName=ContentWrapper, Path=VerticalAlignment}"
                                      HorizontalAlignment="{Binding ElementName=ContentWrapper, Path=HorizontalAlignment}">
                                    <ContentPresenter Content="{TemplateBinding SelectionBoxItem}"
                                                      ContentStringFormat="{TemplateBinding SelectionBoxItemStringFormat}"
                                                      ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}"
                                                      ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}"
                                                      IsHitTestVisible="False"
                                                      SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                                      UseLayoutRounding="{TemplateBinding UseLayoutRounding}"
                                                      Visibility="{Binding ElementName=contentPresenter,  Path=Visibility}" />
                                    <TextBox x:Name="EditableTextBoxClone"
                                             IsReadOnly="{Binding IsReadOnly, RelativeSource={RelativeSource TemplatedParent}}"
                                             Style="{StaticResource MaterialDesignComboBoxEditableTextBox}"
                                             SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                             UseLayoutRounding="{TemplateBinding UseLayoutRounding}"
                                             Visibility="{Binding ElementName=PART_EditableTextBox, Path=Visibility}"
                                             Text="{Binding ElementName=PART_EditableTextBox, Path=Text, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" />
                                </Grid>
                                <TextBlock x:Name="HintClone"
                                           Margin="{Binding ElementName=Hint, Path=Margin}"
                                           HorizontalAlignment="{Binding ElementName=Hint, Path=HorizontalAlignment}"
                                           FontSize="{Binding ElementName=Hint, Path=FontSize}"
                                           Foreground="{Binding ElementName=Hint, Path=Foreground}"
                                           IsHitTestVisible="False"
                                           SnapsToDevicePixels="True"
                                           UseLayoutRounding="True"
                                           Opacity="{Binding ElementName=Hint, Path=Opacity}"
                                           Text="{TemplateBinding wpf:TextFieldAssist.Hint}" />

                                <wpf:Underline IsActive="{Binding ElementName=EditableTextBoxClone, Path=IsKeyboardFocused}"
                                               Visibility="{Binding ElementName=Underline, Path=Visibility}" />
                            </Grid>
                        </Grid>
                        <ScrollViewer Grid.Row="1">
                            <ItemsPresenter x:Name="ItemsPresenter" KeyboardNavigation.DirectionalNavigation="Contained" />
                        </ScrollViewer>
                        <Rectangle Grid.Row="2"
                                   Height="8"
                                   HorizontalAlignment="Stretch"
                                   Fill="Transparent" />
                    </Grid>
                </Popup>
            </Grid>
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="wpf:TextFieldAssist.IsNullOrEmpty" Value="False">
                <Setter TargetName="GridContentCloneWrapper" Property="Margin" Value="16 4 16 4" />
                <Setter TargetName="PART_Popup" Property="VerticalOffset" Value="-20" />
                <Trigger.EnterActions>
                    <BeginStoryboard x:Name="MoveHintAsideStoryboard_BeginStoryboard" Storyboard="{StaticResource MoveHintAsideStoryboard}" />
                </Trigger.EnterActions>
                <Trigger.ExitActions>
                    <BeginStoryboard x:Name="MoveHintBackStoryboard_BeginStoryboard" Storyboard="{StaticResource MoveHintBackStoryboard}" />
                </Trigger.ExitActions>
            </Trigger>

            <Trigger Property="IsEditable" Value="True">
                <Setter TargetName="GridContentCloneWrapper" Property="Margin" Value="16 4 16 4" />
                <Setter TargetName="PART_Popup" Property="VerticalOffset" Value="-20" />

                <Setter TargetName="PART_EditableTextBox" Property="Visibility" Value="Visible" />
                <Setter TargetName="Underline" Property="Visibility" Value="Visible" />
                <Setter TargetName="contentPresenter" Property="Visibility" Value="Collapsed" />
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="wpf:TextFieldAssist.IsNullOrEmpty" Value="False" />
                    <Condition Property="IsKeyboardFocused" Value="True" />
                </MultiTrigger.Conditions>
                <Setter TargetName="Hint" Property="Foreground" Value="{DynamicResource PrimaryHueMidBrush}" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="wpf:TextFieldAssist.IsNullOrEmpty" Value="False" />
                    <Condition SourceName="PART_EditableTextBox" Property="IsKeyboardFocused" Value="True" />
                </MultiTrigger.Conditions>
                <Setter TargetName="Hint" Property="Foreground" Value="{DynamicResource PrimaryHueMidBrush}" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="wpf:TextFieldAssist.IsNullOrEmpty" Value="False" />
                    <Condition Property="IsDropDownOpen" Value="True" />
                </MultiTrigger.Conditions>
                <Setter TargetName="Hint" Property="Foreground" Value="{DynamicResource PrimaryHueMidBrush}" />
            </MultiTrigger>
            <Trigger Property="HasItems" Value="false">
                <Setter TargetName="dropDownBorder" Property="Height" Value="95" />
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsGrouping" Value="true" />
                    <Condition Property="VirtualizingPanel.IsVirtualizingWhenGrouping" Value="false" />
                </MultiTrigger.Conditions>
                <Setter Property="ScrollViewer.CanContentScroll" Value="false" />
            </MultiTrigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <Style x:Key="MaterialDesignComboBox" TargetType="{x:Type ComboBox}">
        <Setter Property="wpf:ComboBoxAssist.ManagedOverlay" Value="True"/>
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="BorderBrush" Value="{DynamicResource MaterialDesignTextBoxBorder}"/>
        <Setter Property="Foreground" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type FrameworkElement}}, Path=(TextElement.Foreground)}"/>
        <Setter Property="BorderThickness" Value="0 0 0 1"/>
        <Setter Property="ItemContainerStyle" Value="{StaticResource MaterialDesignComboBoxItemSelectedCollapsedStyle}" />
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto" />
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto" />
        <Setter Property="Padding" Value="0 4 0 4" />
        <Setter Property="VerticalContentAlignment" Value="Bottom" />
        <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
        <Setter Property="HorizontalAlignment" Value="Left"/>
        <Setter Property="VerticalAlignment" Value="Bottom"/>
        <Setter Property="ScrollViewer.CanContentScroll" Value="true" />
        <Setter Property="ScrollViewer.PanningMode" Value="Both" />
        <Setter Property="UseLayoutRounding" Value="False"/>
        <Setter Property="SnapsToDevicePixels" Value="False"/>
        <Setter Property="Stylus.IsFlicksEnabled" Value="False" />
        <Setter Property="Template" Value="{StaticResource MaterialDesignComboBoxTemplate}" />
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="true">
                <Setter Property="BorderBrush" Value="{DynamicResource PrimaryHueMidBrush}" />
            </Trigger>
            <Trigger Property="IsKeyboardFocused" Value="true">
                <Setter Property="BorderBrush" Value="{DynamicResource PrimaryHueMidBrush}" />
            </Trigger>
            <Trigger Property="IsKeyboardFocusWithin" Value="true">
                <Setter Property="BorderBrush" Value="{DynamicResource PrimaryHueMidBrush}" />
            </Trigger>
            <Trigger Property="IsEditable" Value="true">
                <Setter Property="IsTabStop" Value="false" />
                <Setter Property="ItemContainerStyle" Value="{StaticResource MaterialDesignComboBoxItemStyle}" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="MaterialDesignFloatingHintComboBox"
           BasedOn="{StaticResource MaterialDesignComboBox}"
           TargetType="{x:Type ComboBox}">
        <Setter Property="Template" Value="{StaticResource MaterialDesignFloatingHintComboBoxTemplate}" />
        <Setter Property="wpf:TextFieldAssist.Text" Value="{Binding RelativeSource={RelativeSource Self}, Path=Text}" />
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="true">
                <Setter Property="BorderBrush" Value="{DynamicResource PrimaryHueMidBrush}" />
            </Trigger>
            <Trigger Property="IsKeyboardFocused" Value="true">
                <Setter Property="BorderBrush" Value="{DynamicResource PrimaryHueMidBrush}" />
            </Trigger>
            <Trigger Property="IsKeyboardFocusWithin" Value="true">
                <Setter Property="BorderBrush" Value="{DynamicResource PrimaryHueMidBrush}" />
            </Trigger>
            <Trigger Property="IsEditable" Value="true">
                <Setter Property="IsTabStop" Value="false" />
            </Trigger>
        </Style.Triggers>
    </Style>

</ResourceDictionary>
