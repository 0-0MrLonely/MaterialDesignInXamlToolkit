<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:controlz="clr-namespace:Controlz"
                    xmlns:wpf="clr-namespace:MaterialDesignThemes.Wpf"
                    xmlns:converters="clr-namespace:MaterialDesignThemes.Wpf.Converters">

    <Style TargetType="{x:Type wpf:PopupBox}" x:Key="MaterialDesignPopupBox">
        <Setter Property="ToggleContent">
            <Setter.Value>
                <Path Data="M4.1239999,2.0625 C4.1239999,3.2015873 3.2008111,4.125 2.062,4.125 C0.92318883,4.125 0,3.2015873 0,2.0625 C0,0.9234127 0.92318883,0 2.062,0 C3.2008111,0 4.1239999,0.9234127 4.1239999,2.0625 z M4.1859999,8.0465 C4.1859999,9.1855873 3.2628111,10.109 2.124,10.109 C0.98518883,10.109 0.062,9.1855873 0.062,8.0465 C0.062,6.9074127 0.98518883,5.984 2.124,5.984 C3.2628111,5.984 4.1859999,6.9074127 4.1859999,8.0465 z M4.1859999,13.9215 C4.1859999,15.060587 3.2628111,15.984 2.124,15.984 C0.98518883,15.984 0.062,15.060587 0.062,13.9215 C0.062,12.782413 0.98518883,11.859 2.124,11.859 C3.2628111,11.859 4.1859999,12.782413 4.1859999,13.9215 z"                      
                      Fill="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType=wpf:PopupBox}, Path=Foreground}"
                      Margin="4 0 4 0"/>
            </Setter.Value>
        </Setter>
        <Setter Property="HorizontalAlignment" Value="Left" />
        <Setter Property="wpf:ShadowAssist.ShadowDepth" Value="Depth3" />
        <Setter Property="TextElement.FontWeight" Value="Normal" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type wpf:PopupBox}">
                    <ControlTemplate.Resources>
                        <Style TargetType="ToggleButton" x:Key="ToggleButtonStyle">
                            <Setter Property="Template">
                                <Setter.Value>
                                    <ControlTemplate TargetType="ToggleButton">
                                        <wpf:Ripple Content="{TemplateBinding Content}" ContentTemplate="{TemplateBinding ContentTemplate}" Focusable="False"                                                          
                                                    ClipToBounds="False"
                                                    wpf:RippleAssist.IsCentered="True"
                                                    Feedback="{DynamicResource MaterialDesignFlatButtonRipple}"
                                                    HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" 
                                                    VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
                                                    Padding="{TemplateBinding Padding}" 
                                                    SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                                    </ControlTemplate>
                                </Setter.Value>
                            </Setter>
                        </Style>
                    </ControlTemplate.Resources>
                    <Grid>
                        <ToggleButton x:Name="PART_Toggle" Style="{StaticResource ToggleButtonStyle}" IsChecked="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=IsPopupOpen, Mode=TwoWay}"
                                      Content="{TemplateBinding ToggleContent}" ContentTemplate="{TemplateBinding ToggleContentTemplate}"
                                      Cursor="Hand"
                                      VerticalAlignment="Center"
                                      />
                        <controlz:PopupEx x:Name="PART_Popup" IsOpen="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=IsPopupOpen, Mode=TwoWay}"
                                          CustomPopupPlacementCallback="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=PopupPlacementMethod}"
                                          HorizontalOffset="5"
                                          VerticalOffset="5"
                                          PlacementTarget="{Binding ElementName=PART_Toggle}"
                                          Placement="Custom"
                                          PopupAnimation="Fade"
                                          AllowsTransparency="True">
                            <wpf:Card Content="{TemplateBinding PopupContent}" ContentTemplate="{TemplateBinding PopupContentTemplate}"                                        
                                      Margin="5" />
                        </controlz:PopupEx>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    
    <Style TargetType="{x:Type wpf:PopupBox}" x:Key="MaterialDesignMultiFloatingActionPopupBox">
        <Setter Property="Background" Value="{DynamicResource PrimaryHueMidBrush}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource PrimaryHueMidBrush}"/>
        <Setter Property="Foreground" Value="{DynamicResource PrimaryHueMidForegroundBrush}"/>
        <Setter Property="HorizontalAlignment" Value="Left" />
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Cursor" Value="Hand"/>
        <Setter Property="wpf:ShadowAssist.ShadowDepth" Value="Depth2" />
        <Setter Property="Width" Value="40" />
        <Setter Property="Height" Value="40" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type wpf:PopupBox}">
                    <ControlTemplate.Resources>
                        <Style TargetType="ToggleButton" x:Key="ToggleButtonStyle">
                            <Setter Property="Template">
                                <Setter.Value>
                                    <ControlTemplate TargetType="ToggleButton">
                                        <Grid>
                                            <VisualStateManager.VisualStateGroups>
                                                <VisualStateGroup Name="CheckedStates">
                                                    <VisualStateGroup.Transitions>
                                                        <VisualTransition From="*" To="Checked">
                                                            <Storyboard>
                                                                <DoubleAnimation Storyboard.TargetName="RippleRotateTransform"
                                                                                 Storyboard.TargetProperty="Angle"
                                                                                 To="45"
                                                                                 Duration="0:0:0.3">
                                                                    <DoubleAnimation.EasingFunction>
                                                                        <QuadraticEase EasingMode="EaseInOut" />
                                                                    </DoubleAnimation.EasingFunction>
                                                                </DoubleAnimation>
                                                            </Storyboard>
                                                        </VisualTransition>
                                                        <VisualTransition From="Checked" To="Unchecked">
                                                            <Storyboard>
                                                                <DoubleAnimation Storyboard.TargetName="RippleRotateTransform"
                                                                                 Storyboard.TargetProperty="Angle"
                                                                                 To="0"
                                                                                 Duration="0:0:0.3">
                                                                    <DoubleAnimation.EasingFunction>
                                                                        <QuadraticEase EasingMode="EaseInOut" />
                                                                    </DoubleAnimation.EasingFunction>
                                                                </DoubleAnimation>
                                                            </Storyboard>
                                                        </VisualTransition>
                                                    </VisualStateGroup.Transitions>
                                                    <VisualState x:Name="Checked">
                                                        <Storyboard>
                                                            <DoubleAnimation Storyboard.TargetName="RippleRotateTransform"
                                                                             Storyboard.TargetProperty="Angle"
                                                                             To="45"
                                                                             Duration="0" />
                                                        </Storyboard>
                                                    </VisualState>
                                                    <VisualState x:Name="Unchecked">
                                                        <Storyboard>
                                                            <DoubleAnimation Storyboard.TargetName="RippleRotateTransform"
                                                                             Storyboard.TargetProperty="Angle"
                                                                             To="0"
                                                                             Duration="0" />
                                                        </Storyboard>
                                                    </VisualState>
                                                </VisualStateGroup>
                                            </VisualStateManager.VisualStateGroups>
                                            <Ellipse Fill="{TemplateBinding Background}" Stroke="{TemplateBinding BorderBrush}" StrokeThickness="{TemplateBinding BorderThickness}" 
                                                     Effect="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType=wpf:PopupBox}, Path=(wpf:ShadowAssist.ShadowDepth), Converter={x:Static converters:ShadowConverter.Instance}}"
                                                     x:Name="border" />
                                            <wpf:Ripple Content="{TemplateBinding Content}" ContentTemplate="{TemplateBinding ContentTemplate}" Focusable="False"  
                                                        Feedback="White"
                                                        Clip="{Binding ElementName=GeometryEllipse, Path=RenderedGeometry}" ClipToBounds="True"
                                                        wpf:RippleAssist.IsCentered="True"
                                                        HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" 
                                                        VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
                                                        Padding="{TemplateBinding Padding}" 
                                                        SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                                        RenderTransformOrigin=".5,.5">
                                                <wpf:Ripple.RenderTransform>
                                                    <RotateTransform x:Name="RippleRotateTransform" Angle="0" />
                                                </wpf:Ripple.RenderTransform>
                                            </wpf:Ripple>
                                            <Ellipse x:Name="GeometryEllipse" Fill="Transparent" IsHitTestVisible="False" Focusable="False" />
                                        </Grid>
                                        <ControlTemplate.Triggers>
                                            <Trigger Property="IsEnabled" Value="false">
                                                <Setter Property="Opacity" Value="0.23"/>
                                            </Trigger>
                                            <Trigger Property="IsMouseOver" Value="True">
                                                <Setter TargetName="border" Property="wpf:ShadowAssist.Darken" Value="True" />
                                            </Trigger>
                                        </ControlTemplate.Triggers>
                                    </ControlTemplate>
                                </Setter.Value>
                            </Setter>
                        </Style>
                    </ControlTemplate.Resources>
                    <Grid>
                        <ToggleButton x:Name="PART_Toggle" Style="{StaticResource ToggleButtonStyle}" IsChecked="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=IsPopupOpen, Mode=TwoWay}"
                                      Content="{TemplateBinding ToggleContent}" ContentTemplate="{TemplateBinding ToggleContentTemplate}"
                                      Cursor="Hand"
                                      Background="{TemplateBinding Background}"
                                      BorderBrush="{TemplateBinding BorderBrush}"
                                      Foreground="{TemplateBinding Foreground}"
                                      VerticalAlignment="Stretch"
                                      HorizontalAlignment="Stretch"                                      
                                      />
                        <controlz:PopupEx x:Name="PART_Popup" IsOpen="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=IsPopupOpen, Mode=TwoWay}"
                                          CustomPopupPlacementCallback="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=PopupPlacementMethod}"
                                          HorizontalOffset="5"
                                          VerticalOffset="5"
                                          PlacementTarget="{Binding ElementName=PART_Toggle}"
                                          Placement="Custom"
                                          PopupAnimation="Fade"
                                          AllowsTransparency="True">
                            <wpf:Card Content="{TemplateBinding PopupContent}" ContentTemplate="{TemplateBinding PopupContentTemplate}"      
                                      Margin="5" Padding="8">
                                <wpf:Card.Resources>
                                    <ResourceDictionary>
                                        <Style TargetType="{x:Type Button}">
                                            <Style.Setters>
                                                <Setter Property="Background" Value="{DynamicResource MaterialDesignPrimaryLightBrush}" />
                                                <Setter Property="Foreground" Value="{DynamicResource MaterialDesignPrimaryLightForegroundBrush}" />
                                                <Setter Property="ToolTipService.IsEnabled" Value="False" />
                                                <Setter Property="Template">
                                                    <Setter.Value>
                                                        <ControlTemplate TargetType="{x:Type Button}">
                                                            <StackPanel Orientation="Horizontal" Margin="8">
                                                                <Grid Clip="{Binding ElementName=UncheckedEllipse, Path=RenderedGeometry}" ClipToBounds="True" Background="{TemplateBinding Background}"
                                                                      Width="30" Height="30">
                                                                    <Ellipse Fill="{TemplateBinding Background}" Width="{TemplateBinding Width}" Height="{TemplateBinding Height}" x:Name="UncheckedEllipse"  />
                                                                    <ContentPresenter x:Name="contentPresenter" ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" Grid.Column="1" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                                                                </Grid>
                                                                <Border Background="{DynamicResource MaterialDesignToolTipBackground}" Margin="8 0 0 0" Padding="8">
                                                                    <ContentControl Foreground="{DynamicResource MaterialDesignPaper}" Content="{TemplateBinding ToolTip}" VerticalAlignment="Center" />
                                                                </Border>
                                                            </StackPanel>
                                                        </ControlTemplate>
                                                    </Setter.Value>
                                                </Setter>
                                            </Style.Setters>
                                        </Style>
                                    </ResourceDictionary>
                                </wpf:Card.Resources>
                                <wpf:Card.Background>
                                    <SolidColorBrush Color="White" Opacity=".6" />
                                </wpf:Card.Background>
                            </wpf:Card>
                        </controlz:PopupEx>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="ToggleContent">
            <Setter.Value>
                <Viewbox Width="24" Height="24">
                    <Canvas Width="24" Height="24">
                        <Path Data="M19,13H13V19H11V13H5V11H11V5H13V11H19V13Z" Fill="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType=wpf:PopupBox}, Path=Foreground}" />
                    </Canvas>
                </Viewbox>
            </Setter.Value>
        </Setter>
    </Style>

</ResourceDictionary>